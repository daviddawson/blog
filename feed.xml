<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David Dawson</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 May 2017 19:05:14 +0100</pubDate>
    <lastBuildDate>Tue, 09 May 2017 19:05:14 +0100</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Generic DAO in Spring with Parameterized Types</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m currently finishing cleaning up a new application framework built upon the Muon communications toolkit, called &lt;strong&gt;Newton&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this framework, we provide support for building Event Sourced &lt;strong&gt;Aggregate Roots&lt;/strong&gt;, Stream processed Views, long running
transactional Sagas, commands and general event handling. Lots of good things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I want to describe the Aggregate Root handling, as I had an epic fight with Spring/ Java Generics today that left me somewhat drained!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DDD an aggregate root is the boundary of transactional consistency. Everything that happens withing the aggregate is consistent with its own rules and view of the world. In Newton, all aggregates
  are event sourced, meaning that they are persisted as the events describing the changes in their state, and then rebuilt from
  that stream of events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Queries on the state of the system are done exclusively against the Views, so the repositories that load/ save aggregates
are actually all an extension of the same base class, &lt;code&gt;MuonEventSourceRepository&amp;lt;A extends AggregateRoot&amp;gt;&lt;/code&gt;, implementing
the interface &lt;code&gt;EventSourceRepository&amp;lt;A extends AggregateRoot&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ideal way of using these would be like so&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color: #AA22FF&quot;&gt;@Scope&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;prototype&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #AA22FF&quot;&gt;@Component&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;MyCommand&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;implements&lt;/span&gt; Command &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;
 &lt;span style=&quot;color: #AA22FF&quot;&gt;@Autowired&lt;/span&gt;
 &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;private&lt;/span&gt; EventSourceRepository&lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;&lt;/span&gt; repository

 &lt;span style=&quot;color: #AA22FF&quot;&gt;@Override&lt;/span&gt;
 &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;execute&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;
     log&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;debug&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;loading account ${id} to activate it&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;
     User user &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; repository&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;load&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;id&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;
     user&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;activateAccount&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;()&lt;/span&gt;
     repository&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;save&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;user&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;
 &lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is possible in vanilla spring with the appropriate beans, but you have to create extensions of the class to put in the
generics information. So, create a &lt;code&gt;UserRepository extends MuonEventSourceRepository&amp;lt;User&amp;gt;&lt;/code&gt;, and so on. This seems somewhat
cluttered, and, in a little way, gets in the way of the aim of the Muon projects, which is to make distribuuted computing more approachable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Solving this problem turned out to be somewhat more involved than I first thought!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solutions I tried were :-&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using a Java Proxy. This doesn&amp;#8217;t work, you don&amp;#8217;t get the extended generic information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating BeanDefinitions using GenericTypeResolver. This doesn&amp;#8217;t work, its not useful for this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guava TypeTokens to capture the type information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, generating classes on the fly using Javassist. This works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-real-problem&quot;&gt;The real problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The real problem here is the way Java implements Generics. We have all seen Type Erasure in action, so Java developers are
trained to think that Generic information is removed from the bytecode. This isn&amp;#8217;t actually fully true.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generic information &lt;strong&gt;is&lt;/strong&gt; stripped from variable references, and never makes it into the bytecode, so any and all variables
that you have in your code doesn&amp;#8217;t have sufficient generic parameter information to support creating bean definitions that can
be autowired using the generics parameters, as above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is, though, information kept in &lt;strong&gt;Class&lt;/strong&gt; definitions. Its in the class files, just kept away from prying eyes apart from
through some reflection apis. It is these reflection APIs that Spring, and other frameworks, use to do wiring using generic params.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, to make the above work, I needed to get classes with this information in them. Its impossible to create raw instances of
&lt;code&gt;MuonEventSourceRepository&lt;/code&gt; that contain the parameter we&amp;#8217;ve set, as only a subclass would have it in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution then is clear in hindsight, we need to create subclasses. The options were some kind of inline/ anonymous class approach,
proxies and full on code generation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first two failed, and fairly quickly. I recommend you skip them!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution that worked for me was to use Javassist to generate subclasses, and explicitly insert the required generic
parameter information into them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The broader problem was identifying all of the Aggregate classes in the application, and then generating a new repository
for each of them. We have a utility, using the Reflections library, that can do this, given a starting point. To give that starting
point, and to hook in the automatic creation of repositories, we created a &lt;code&gt;@EnableNewton&lt;/code&gt; annotation in the tradition of
 spring boot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This looks like this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color: #AA22FF&quot;&gt;@Target&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;({&lt;/span&gt;ElementType&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;TYPE&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;})&lt;/span&gt;
&lt;span style=&quot;color: #AA22FF&quot;&gt;@Retention&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;RetentionPolicy&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;RUNTIME&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #AA22FF&quot;&gt;@Documented&lt;/span&gt;
&lt;span style=&quot;color: #AA22FF&quot;&gt;@Import&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;EnableNewtonRegistrar&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #AA22FF&quot;&gt;@interface&lt;/span&gt; EnableNewton &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;
  String&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;default&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;{};&lt;/span&gt;       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Reference a spring managed class that can be used to implement behaviour for this annotation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This annotation can be, optionally, passes packages to include in the scanning for AggregateRoots&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class referenced&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public class EnableNewtonRegistrar implements ImportBeanDefinitionRegistrar {

  @Override
  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {
    try {
      initScan(importingClassMetadata);                                                                   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

      MuonLookupUtils.listAllAggregateRootClass().forEach(s -&amp;gt; {                                          &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

        AggregateConfiguration a = s.getAnnotation(AggregateConfiguration.class);                         &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

        if (a == null)
          throw new IllegalArgumentException(&quot;Currently @AggregateConfiguration(context) is required&quot;);
        }

        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();                              &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
        beanDefinition.setBeanClass(makeRepo(s));                                                        &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        ConstructorArgumentValues vals = new ConstructorArgumentValues();
        vals.addGenericArgumentValue(s);                                                                 &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
        vals.addGenericArgumentValue(a.context());
        beanDefinition.setConstructorArgumentValues(vals);

        registry.registerBeanDefinition(&quot;newtonRepo&quot; + s.getSimpleName(), beanDefinition);               &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      });
    } catch (ClassNotFoundException e) {
      e.printStackTrace();
    }
  }

  ....
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use reflections to scan for the right classes. We end up with a list we can iterate.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the list, and iterate them all. Each class extends AggregateRoot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Obtain an annotation on the particular AggregateRoot, ensure its there.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create a new BeanDefinition, useful for low level adding of beans into a Spring app context.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set the bean class to be a class returned by &lt;code&gt;makeRepo&lt;/code&gt;&amp;#8230;&amp;#8203;. we&amp;#8217;ll get to this ..&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set the arguments that can&amp;#8217;t be injected, in this case, the Class we&amp;#8217;re working on at the String extracted from the annotation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Register the bean&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When this has run, a new bean will have been created, the repository!  The key is the &lt;code&gt;makeRepo(Class)&lt;/code&gt; method. This
needs to generate a new repository class, that extends &lt;code&gt;MuonEventSourceRepository&lt;/code&gt;, and has the correct generic param set for
the particular AggregateRoot we are looking at.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;javassist-to-the-rescue&quot;&gt;Javassist to the rescue&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By this point, I&amp;#8217;d spent a good 3 hours hammering through this, and wanted to wrap up.  The internet showed very little
  of anyone tackling this precise problem. By looking through the Javassist tutorials and some judicious googling, I learned
  that Generic parameter information can be injected into a class file by Javassist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is what I came up with&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;private Class makeRepo(Class param) {
  ClassPool defaultClassPool = ClassPool.getDefault();
  try {
    CtClass superInterface = defaultClassPool.getCtClass(MuonEventSourceRepository.class
      .getName());

    String repoName = param.getName() + &quot;Repository&quot;;

    CtClass repositoryInterface = defaultClassPool.makeClass(repoName, superInterface);                &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    ClassFile classFile = repositoryInterface.getClassFile();

    String sig = &quot;Ljava/lang/Object;Lio/muoncore/newton/eventsource/muon/MuonEventSourceRepository&amp;lt;L&quot; + getSigName(param) + &quot;;&amp;gt;;&quot;;  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    SignatureAttribute signatureAttribute = new SignatureAttribute(                                   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      classFile.getConstPool(),
      sig);
    classFile.addAttribute(signatureAttribute);

    return repositoryInterface.toClass();

  } catch (NotFoundException | CannotCompileException e) {
    e.printStackTrace();
  }

  return null;
}

private String getSigName(Class param) {
  log.info(&quot;VAL IS &quot; + Arrays.asList(param.getName().split(&quot;\\.&quot;)));
  return StringUtils.arrayToDelimitedString(param.getName().split(&quot;\\.&quot;), &quot;/&quot;);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create a new class, extending MuonEventSourceRepository. Javassist automatically creates the appropriate constructors.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is a Java Generic Parameter signature. It is a fully qualified name of a class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Create a new attribute in the class and insert it in. &lt;strong&gt;This is the key!&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The signature is fascinating. This is the information that is left behind after Type Erasure, the information that Spring
and friends go hunting for to do their magic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s fairly readable. All types extend Object, this class extends &lt;code&gt;MuonEventSourceRepository&amp;lt;User&amp;gt;&lt;/code&gt; (or whatever the AggregateRoot is!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this in place, tests went green across the board and everything worked. I was shocked!  After such a grind, this approach
seems remarkably easy to work with. I&amp;#8217;m still not fully sure of all the implications in all environments, as I expect this will
fail in certain locked down Classloaders. They seem to be more infrequent these days, and the workaround is to go back to the old
model of explicit repository implementations in those cases. So, I&amp;#8217;m happy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Watch out for an announcement on the public release of Newton in the next week or two. If you&amp;#8217;re especially keen to talk about it before hand,
let me know and I&amp;#8217;ll see what I can arrange.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 06 Apr 2017 12:18:00 +0100</pubDate>
        <link>/blog/2017/04/06/spring-generic-dao-generics.html</link>
        <guid isPermaLink="true">/blog/2017/04/06/spring-generic-dao-generics.html</guid>
        
        <category>spring</category>
        
        <category>java</category>
        
        <category>muon</category>
        
        <category>newton</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Building a deploy environment on AWS- Experiments with Rancher and Kubernetes</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since &lt;a href=&quot;/blog/2017/02/04/simplicity-itself-shutdown.html&quot;&gt;coming back to freelancing&lt;/a&gt;, I&amp;#8217;ve (re)started a set of projects with clients, managing them end to end.
This means that I need a deployment environment somewhere that I can throw stuff into. I have much experience with Cloud Foundry
 (I deliver training for Pivotal on it), but its a little heavy for my needs, and I want to have relatively small stateful containers that don&amp;#8217;t take up a full box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been using Docker Machine for a while to host small projects on AWS. I like the workflow that it gives, letting you deploy images from a registry, or have a docker compose file build in place and deploy directly for testing purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The big issues when trying to scale it though are &lt;strong&gt;visibility&lt;/strong&gt; and &lt;strong&gt;multi node&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that I have projects here that are moving into production, and without a larger company managed infrastructure anymore, I need to come up with a solution for these that don&amp;#8217;t take lots of time and effort to install and manage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had a good look around at a few options for managing infrastructure. I recently came across a project called Rancher again at a client, that was actually presented at LMUG a good while ago, so I went to see how it had developed over the past year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has a good story to tell around making management of containerised infrastructure easy, and at first glance, appears to support docker compose which fits my existing workflow. So I thought I&amp;#8217;d give it a try. I&amp;#8217;m writing this as I go, so it&amp;#8217;ll be a discovery for us all!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Installing the server is &lt;strong&gt;very easy&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take an existing docker host (created say, via docker machine on AWS, like I did), and you can install it with a single command. This runs a docker container on the host, which then bootstraps a set of other containers that make up the Rancher server install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have a running server, you need to then pick an orchestration to use for Rancher to manage your applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;orchestration-options&quot;&gt;Orchestration Options&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;This confused me.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rancher has half a dozen different options for container orchestration. It&amp;#8217;s own built in &quot;Cattle&quot; management. This seems to be the one that attracted me to Rancher in their documentation, as it has a very similar workflow to docker compose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, you can use Kubernetes, Mesos, Swarm (aka 'Docker Native') and Windows. Kube is a big draw I think, it certainly caught my eye.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are partitioned into &quot;Environments&quot;, of which Rancher can manage multiples thereof, and support different orchestration options at the same time.  I like this, it lets Rancher be the single management tool for orchestration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What confused me, although perhaps it shouldn&amp;#8217;t have done, is that the developer workflow for each orchestration is totally different. Rancher doesn&amp;#8217;t wrap them particularly, it simply enables management of them in a single place. I installed Kubernetes, this was very quick and easy. I then
very quickly realised that I didn&amp;#8217;t remember how to use kube particularly well, and rapidly retreated. This doesn&amp;#8217;t fit my requirement of &quot;it has to be easy and low effort&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead I chose &quot;Cattle&quot; orchestration, built into Rancher. This seems to fit the workflow that I want.   I could probably have chosen Swarm to get a similar effect, although my experiments with it showed that it deployed a container per node for services. This seems remarkably crude as far as orcehstration goes (compare that to, say Mesos or Cloud Foundry Diego and their ability for very precise positioning). I can&amp;#8217;t imagine this is really the case, but I didn&amp;#8217;t go any deeper than a quick eval.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cattle is easy and understandable. Low level enough without losing high level visibility and most importantly, it fits my current workflow, or so it appears.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think that the key thing is that you should pick the orchestrator that fits with your current operational and development workflow. Rancher seems
to have good support for working with the major orchestrations and bringing them together in one place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve kept the Kube cluster up for some things and I am intending to spend some time with Mesos in the next month or so now that I know it&amp;#8217;s easy to set up from a single management interface.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dev-workflow&quot;&gt;Dev workflow&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use docker compose a large amount, using it as the basis for continuous delivery workflows across all the platforms and runtimes I develop in. You can see this influence on the Muon project which promotes the tool for all of its &quot;getting started&quot; and other deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I find that this also gives a good way to deploy sets of related projects locally and then into the remote system. This disconnect between local and remote is why i&amp;#8217;ve shied away from using Kubernetes for production, as I don&amp;#8217;t need th massive scale or complex orchestrations it provides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once I made the decision to choose a Cattle deployment, deployment of the projects started. I updated TeamCity with a call to rancher-compose and
&lt;em&gt;most&lt;/em&gt; projects fired up. Rancher supports &lt;code&gt;docker-compose.yml&lt;/code&gt; files, with an optional override in its own &lt;code&gt;rancher-compose.yml&lt;/code&gt; file.What became clear is that Rancher support most of the docker compose format, when you are dealing with prebuilt services.
When you are using containers built from the local disk (dev style &lt;strong&gt;build:&lt;/strong&gt; commands), then it seems to break with the way I was using it. At least it did on all of the projects I had that used that style.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I quickly reworked those to build an image in a registry rather than pushing a locally built image using the &lt;code&gt;build&lt;/code&gt; context in the docker-compose file.  All my projects then deployed, and in truth, this is a better model.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;rancher-extensions-to-docker-compose&quot;&gt;Rancher Extensions to Docker Compose&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rancher can accept straight docker compose files and run them. It also lets you define a &lt;code&gt;rancher-compose.yml&lt;/code&gt; that contains extra information Rancher Cattle can use to manage and coddle your containers a bit more&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This gets into active management of containers, which has been an issue on the basic docker machine environment I&amp;#8217;ve used to host these projects before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I haven&amp;#8217;t gone deep into what else Rancher Cattle can do in this regard, but I like its simplicity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ha-and-maintenance&quot;&gt;HA and Maintenance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the main motiviations for me was to get the ability to have a proper HA containerised setup. Docker machine is fine and all, but it&amp;#8217;s
totally fragile! I want to get an HA setup thats easy, multi cloud and reliable. Now that I&amp;#8217;m a freelancer, I&amp;#8217;m going to do this by myself and run
client projects on it, so it has to be production grade, yet very low maintenance.  So, dev workflow aside, this is a very important requirement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setting-up-ha&quot;&gt;Setting up HA&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HA in Rancher requires an external database. Since I&amp;#8217;m on AWS, I used RDS to give a hosted MySQL that I don&amp;#8217;t need to care about.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The hardest part about this was setting up networking in RDS!  Fiddling around with VPC vs DB VPC and network routing was lots of fun and all, but
I&amp;#8217;ve got better things to do. In the end, I got it sorted, Rancher connected and seemed to work fine. (FYI, Frankfurt is not near Dublin)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This seems to be a decent setup, essentially delegating HA synchronisation to the DB cluster/ RDS&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve hit it with a wrench a few times, destroying the odd node and the like, and it&amp;#8217;s not gone down yet, so I&amp;#8217;m reasonably confident it&amp;#8217;ll survive for a while.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;ops-stuff&quot;&gt;Ops stuff&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With my previous little setup, scaling was a purely vertical affair, which was disruptive to say the least. Proper ops tooling wasn&amp;#8217;t feasible to add in,
or really worth it for a hobby system like that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that it&amp;#8217;s productionising, I need some monitoring, log management and alerting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lucky for me, Rancher has this setup in the Cattle catalogue. I installed Prometheus and ElasticSearch/Logstash. This took about 30 mins to do.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;http-load-balancing&quot;&gt;HTTP Load Balancing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m hosting a fair few projects on the same containerised infrastructure. I don&amp;#8217;t want to run the front end containers on every host, or to have a single host that is the single entry point. Instead I&amp;#8217;d like to run 2 of each container (unless under load), spread across the various hosts, and have http traffic route to them after hitting any of the hosts. A load balancer sitting in front and distributing traffic to the host cluster completes the mix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make this work, this is what I did.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set up an AWS Elastic Load Balancer, directing traffic at all the Rancher hosts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installed an &lt;a href=&quot;https://github.com/muoncore/muon-http-proxy&quot;&gt;Event Sourced HTTP Proxy&lt;/a&gt; from the Muon project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Rancher, create a new user stack &lt;code&gt;load-balancing&lt;/code&gt; and then added a load balancer container.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last entry is nice, Rancher lets you create a load balancer (which is HA proxy), run an instance on all hosts and have it direct HTTP traffic to a particular internal service. So I can direct all HTTP traffic to my 2 HTTP proxy nodes that then select the target from their event sourced routing table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding a new http vhost is now as easy as emitting the appropriate muon event and the proxies scale horizontally very easily.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;end-result&quot;&gt;End result.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I managed to deploy a new Rancher server in 5 minutes, experiment with various orchestration options by deploying them to various AWS datacentres
and settle on Cattle within an hour. Migration of projects took a simple rebuilt to deploy them onto the new Rancher environment as simple docker compose
stacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rancher is an interesting tool with a lot to recommend it.  After my initial confusion on what its role actually was as distinct from the orchestrators it
was using, I&amp;#8217;ve come to appreciate the multi-orchestration idea. I don&amp;#8217;t like being forced to make &quot;strategic&quot; decisions based on silly technical reasons,
say Kube vs Mesos. Why not both? Rancher gives a decent answer to that, and I expect it to be my top level Ops tool of choice for the foreseeable future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;em-why-didn-t-you-use-insert-cloud-provider-offering-here-em&quot;&gt;&lt;em&gt;Why didn&amp;#8217;t you use [insert cloud provider offering here].&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I want multi cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;em-this-sounds-awesome-can-i-pay-you-to-do-some-work-for-me-em&quot;&gt;&lt;em&gt;This sounds awesome, can I pay you to do some work for me?&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why, &lt;a href=&quot;/hireme.html&quot;&gt;yes you can&lt;/a&gt;. (ok, fair enough, this is an advert)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;em-what-kind-of-projects-are-you-deploying-em&quot;&gt;&lt;em&gt;What kind of projects are you deploying?&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A fair few.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the new setup, I&amp;#8217;m running&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A marketing experimental analytics system for a top tier broadcast media firm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 startup applications to support funding and MVP building
*&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These moving to production is the main impetus to getting someting production grade in place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simple&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;em-are-you-deploying-stateful-containers-em&quot;&gt;&lt;em&gt;Are you deploying stateful containers?&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes. Generally I use Cassandra to back &lt;a href=&quot;http://muoncore.io/submodules/photon/docs/index.html&quot;&gt;Photon&lt;/a&gt;, an event store from the Muon project. Or run a single Photon
with an data store embedded in its own container for small data sets/ non prod workloads. Both of these need stateful volume management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from that as the data backbone, mysql and neo4j put in a good showing, although I currently have them as view data only. If they totally die, they will
be recontstructed from the event store. For now I&amp;#8217;m happy with that state of affairs. In the future, I may invest some time in making them HA, but I&amp;#8217;m not
that concerned given the ability to rebuild automatically is already there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 28 Feb 2017 12:18:00 +0000</pubDate>
        <link>/blog/2017/02/28/experiments-with-rancher-and-kubernetes.html</link>
        <guid isPermaLink="true">/blog/2017/02/28/experiments-with-rancher-and-kubernetes.html</guid>
        
        <category>containers</category>
        
        <category>docker</category>
        
        <category>infrastructure</category>
        
        <category>devops</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Muon Developer Diary</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m going to be writing regular updates on what we are doing in the Muon project and highlighting different areas of the projects. I&amp;#8217;ll try to keep this weekly, but we&amp;#8217;ll see how that goes!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They will split into two main sections, &lt;strong&gt;Focus&lt;/strong&gt; and &lt;strong&gt;Updates&lt;/strong&gt;. Focus will feature a part of Muon and related projects and go in depth on some area or other. Updates will describe the week by week developments in the world of Muon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;focus-an-overview-of-muon&quot;&gt;Focus - An Overview of Muon&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this inaugural post, I give an overview of the projects and how they fit together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;/blog/2017/02/21/muon-intro.html&quot;&gt;intro blog post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The projects can be split up into &lt;strong&gt;Muon Implementations&lt;/strong&gt;, &lt;strong&gt;Muon Plugins&lt;/strong&gt; and &lt;strong&gt;Services built with Muon&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;muon-projects&quot;&gt;Muon Projects&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://muoncore.io/submodules/java/doc/&quot;&gt;Muon CLI&lt;/a&gt; - The CLI interface to Muon systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://muoncore.io/submodules/java/doc/&quot;&gt;Muon Java&lt;/a&gt; - Java implementation. First built and generally the place things are experimented with first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://muoncore.io/submodules/node/doc/index.html&quot;&gt;Muon Node&lt;/a&gt; - Node implementation of Muon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://muoncore.io/submodules/clojure/doc/index.html&quot;&gt;Muon Clojure&lt;/a&gt; - Clojure wrapper around Muon Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://muoncore.io/submodules/muonjs/doc/index.html&quot;&gt;MuonJs&lt;/a&gt; - Muon running in the browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/muoncore/libmuon&quot;&gt;libMuon&lt;/a&gt; - C++ implementation of Muon, highly experimental.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;muon-plugins&quot;&gt;Muon Plugins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the aggressively polyglot nature of Muon, we have to find a way to avoid the &lt;em&gt;matrix effect&lt;/em&gt; of having extensions and an arbitrary number of Muon implementations. We&amp;#8217;re handling this by defining APIs to allow us to build most implementations in C++ and have a method for integrating into the three major Muon environments. This will cover &lt;strong&gt;Discovery&lt;/strong&gt; and &lt;strong&gt;Transport&lt;/strong&gt; plugins. Protocols will be handled by the Protocol Language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/muoncore/transport-websocket&quot;&gt;Websocket Transport Native Plugin&lt;/a&gt;. Experiments in building cross language plugins.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;These are not yet usable&lt;/strong&gt;, however do expect many more of these when the native build pipeline and language wrapping approach is completed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;services-built-with-muon&quot;&gt;Services built with Muon&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many protocols don&amp;#8217;t operate in a peer fashion. Instead there is a definite server side that does something rich on your behalf.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The prime example right now is Photon, an event storage microservice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://muoncore.io/submodules/photon/docs/index.html&quot;&gt;Photon&lt;/a&gt; - an advanced event store and stream server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://muoncore.io/submodules/aether/docs/index.html&quot;&gt;Aether&lt;/a&gt; - Identity management facade for Muon systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://muoncore.io/submodules/muonjs-gateway/doc/index.html&quot;&gt;Muonjs Gateway&lt;/a&gt; - allow Muon systems in the browser to connect to server side via a transport level message router.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a set of other experimental projects in the repos that I&amp;#8217;ll leave for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a quick overview of the current projects. There is a lot in flight, more next time!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past few weeks :-&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;ve made substantial progress on the protocol language, ably led by Sergio Alvarez and Luis Oliva. See the &lt;a href=&quot;https://github.com/tranchis/ltl-engine&quot;&gt;repo where work is underway&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We added features to Photon to support DDD style event sourced aggregate routes (shallow streams) and initial clent support. More in a couple of dev diaries time where I&amp;#8217;ll focus on Photon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Created an &lt;a href=&quot;https://github.com/muoncore/test-event-stores&quot;&gt;embedded Muon event store &lt;/a&gt; to support unit testing event sourced applications. This implements the event related protocols and operates over the Muon in-mem transport/ discovery. Initially, this is for the JVM. Node will be next.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a developer diary entry for the Muon project, showing what we&amp;#8217;ve done on the project over the past week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the home of the Muon project at &lt;a href=&quot;http://muoncore.io&quot; class=&quot;bare&quot;&gt;http://muoncore.io&lt;/a&gt;, and at the &lt;a href=&quot;http://github.com/muoncore&quot;&gt;Muon Core&lt;/a&gt; github org.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 22 Feb 2017 10:38:00 +0000</pubDate>
        <link>/muon-devdiary/2017/02/22/muon-developer-diary.html</link>
        <guid isPermaLink="true">/muon-devdiary/2017/02/22/muon-developer-diary.html</guid>
        
        <category>diary</category>
        
        <category>muon</category>
        
        <category>microservices</category>
        
        
        <category>muon-devdiary</category>
        
      </item>
    
      <item>
        <title>Introducing Muon</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article introduces a project I&amp;#8217;ve been working on for the past few years in one form or another. Muon&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the past bunch of years, I&amp;#8217;ve been working with distributed systems, often with a messaging component. This is a fun and rewarding part of software development, up there with UI development. It&amp;#8217;s fairly involved, and often hard, but covers lots of different areas, both deeply theoretical and very practical. Once you solve an issue involving a race condition that requires networks, heavy load and specific hardware to trigger, you become far more interested in the world of concurrency, networking and spreading beyond the regular languages you are used to!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past 5 years or so, these systems I have been involved with have been recognisably what are now called Microservice systems. The only difference I see between them is the underlying &lt;a href=&quot;/microservices/2016/07/20/microservices-philosophy.html&quot;&gt;motivations and philosophy&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I&amp;#8217;ve built these systems, large, small, high performance, low performance and so on. I&amp;#8217;ve noticed a set of things that keep on coming up. Not quite common problems, but common complaints perhaps. My current bug bears in the Microservices world are the &lt;strong&gt;abuse of http&lt;/strong&gt; for local communication and the discarding of &lt;strong&gt;polyglot&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HTTP is a lovely protocol, easy to grasp, easy to use. It is at the same time, too flexible and semantically weak to be the one and only protocol for use in a Microservice system.  It is too flexible, as some of the most important things are left unspecified, for example versioning/ upgrades, schemas, conversational state management.   It is semantically weak in that it can do request&amp;#8594;response, and nothing more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t wish to criticise HTTP as a protocol, only to say that it isn&amp;#8217;t good enough to be the only basis for a distributed system to communicate with. Every microservice system that I&amp;#8217;ve seen beyond the trivial uses messaging of some sort, either replacing HTTP fully, or relegating HTTP to queries. The aim is to get rid of HTTP in order to get rid of what is being &lt;strong&gt;done with HTTP&lt;/strong&gt;, which is building deep RPC style dependency webs. Which are awful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The polyglot nature of Microservices is now under threat. Pretty much every Microservice framework is language locked, and seems to be happy to remain that way. I don&amp;#8217;t like this state of affairs, I code in several languages at once, and I see benefits in doing this. Others may disagree, but if you buy into one of the current frameworks around, you are locked to a runtime by the investment in that framework, even if you&amp;#8217;ve Swaggerred up. less so than a monolith, yes, but locked in all the same.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of years ago, I started a research project into the communication aspects of Microservices and how that can be made more effective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This project was called Muon, and I&amp;#8217;ve talked about it a couple of times since. Showing where the research has gotten up to.  I then worked with a research time at Sky, CIS Tech Futures, ably led by Gawain Hammond. THat team has recently been dissolved, but in the 2 years we researched and built together, we did some fascinating things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post is to introduce the Muon projects and give a taster to what they promise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-does-it-let-me-do&quot;&gt;What does it let me do?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Muon lets you build and then attach services together very quickly, allows them to communicate in a variety of
ways that we call &lt;code&gt;Protocols&lt;/code&gt;. We have a set of re-usable microservices
that help you do certain things out of the box, and none of this cares about your infrastructure. You can choose Kubernetes, Mesos and AWS, or all at the same time and Muon services will run happily.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It gives you support in all the right places, works with your infrastructure of choice, and gets out of the way
of you writing code that &lt;strong&gt;makes you money&lt;/strong&gt; (or whatever your motivation is!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, here&amp;#8217;s a simple Java service, exposing a simple request/ response protocol (ie, what is used for &lt;em&gt;RPC&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #666666&quot;&gt;[]&lt;/span&gt; args&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throws&lt;/span&gt; Exception &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;

    AutoConfiguration config &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; MuonConfigBuilder&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;withServiceIdentifier&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;rpc-test&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;();&lt;/span&gt;

    Muon muon &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; MuonBuilder&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;withConfig&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;config&lt;span style=&quot;color: #666666&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;();&lt;/span&gt;

    muon&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;getDiscovery&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;blockUntilReady&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;();&lt;/span&gt;

    muon&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;handleRequest&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;path&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;),&lt;/span&gt; wrapper &lt;span style=&quot;color: #666666&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;
      wrapper&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;ok&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #666666&quot;&gt;});&lt;/span&gt;
&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from the build file, this is it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a JavaScript service that consumes it&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; muoncore &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; require(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;muon-core&amp;#39;&lt;/span&gt;)

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;var&lt;/span&gt; amqpurl &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;amqp://muon:microservices@localhost&amp;quot;&lt;/span&gt;
muon &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; muoncore.create(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;nodejs-client&amp;quot;&lt;/span&gt;, amqpurl)

muon.request(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;rpc://rpc-test/ping&amp;#39;&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;i love dogs&amp;quot;&lt;/span&gt;).then(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;function&lt;/span&gt; (event) {
    logger.warn(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;response received! event=&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;+&lt;/span&gt; JSON.stringify(event))
}, &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;function&lt;/span&gt; (err) {
    logger.error(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;error received!!!!!&amp;quot;&lt;/span&gt;)
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, you&amp;#8217;ll need a package.json/ NPM setup, but nothing else.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quick, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What just happened there is that we defined an endpoint in the Request/Response &lt;strong&gt;&lt;em&gt;messaging protocol&lt;/em&gt;&lt;/strong&gt;. When you call &lt;code&gt;muon.request&lt;/code&gt;, the remote service is discovered, a method of network communication is chosen (in this case AMQP), a connection is made to the remote, a message representing the request is sent and packaged into something to be sent across the AMQP broker (in this case). The server side receives it, unpacks it into a Request and gives the ability to respond to the message via the &lt;code&gt;requestWrapper.ok&lt;/code&gt; method. This gives good threading behaviour as in all cases, conversation state is bound up to the logical Muon channel, not to any particular thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although Muon lets you build Microservices, as you just saw a very simple example of, it does much more than that. We researched into the nature of &lt;strong&gt;&lt;em&gt;distributed communication&lt;/em&gt;&lt;/strong&gt;, and how we might tackle it in a generalised form. Muon is about distributed communication and making this as easy to use, reason about and importantly, &lt;strong&gt;extend&lt;/strong&gt;, as local method calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At its core, Muon implements a few fairly simple concepts, that all communication can be reduced to messages over bidirectional channels between services. Once you have the ability to find remote services and open a &lt;code&gt;bichannel&lt;/code&gt; to that service, arbitrarily complex message protocols can be written that make use of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Making this easy to use and extend is where we&amp;#8217;ve spent our time, but all aspects of Muon implement this core idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Communicating Sequential Processes - CSP&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Muon is implemented using a form of CSP. It uses the core concept of the &lt;code&gt;channel&lt;/code&gt; to attach logic together. Logic
code sees only the channels it is connected to, not the agents or processes at the other end of the channel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Muon, the CSP model is both simplified, and extended. It is simplified in that much of the advanced process algebra isn&amp;#8217;t present, only channel&amp;#8594;process&amp;#8594;channel with async dispatching and limited other special cases. It is extended in that all channels in Muon are fully bidirectional, to make that explicit we often refer to them as a &lt;code&gt;bichannel&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This model allows us to create channels that compress, encrypt and cross a network, where the Protocol code we actually care about is kept insulated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;protocols-codifying-interactions-between-microservices&quot;&gt;Protocols - Codifying interactions between microservices&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The concept of a message &lt;strong&gt;Protocol&lt;/strong&gt; is core to Muon. It describes the ability to define interactions that are far richer than HTTP could be, coordinating multiple services, handling errors, being efficient in directing and orchestrating remote services, giving the ability to maintain long running conversations across the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the while, with the hard Protocol/ BiChannel split, these are easily testable away from your transport implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;protocol-example-reactive-streams&quot;&gt;Protocol Example: Reactive Streams&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To take an example of something commonly required when using networked data, streaming. Currently the JVM world has standardised on the &lt;a href=&quot;www.reactive-streams.org&quot;&gt;Reactive Streams&lt;/a&gt; specification as the gold standard for streaming interoperability within the JVM. This has been adopted into Java 9, and so can be relied on to have broad support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wouldn&amp;#8217;t it be useful to have access to this standard &lt;strong&gt;&lt;em&gt;outside&lt;/em&gt;&lt;/strong&gt; of the JVM?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The RS specification describes a set of signals being sent back and forth between a &lt;code&gt;Publisher&lt;/code&gt; and a &lt;code&gt;Subscriber&lt;/code&gt;. These are method calls, however in Muon, we can model these signals as messages sent between two services along their connecting &lt;code&gt;bichannel&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is in fact what we have as one of the Muon protocols, an implementation of Reactive Streams at the network level, so you can discover and subscribe to networked &lt;code&gt;Publishers&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means we can network reactive streams implementations very easily, and support this across different languages and runtimes, so long as they have the Muon Reactive Streams protocol implemented.  If you have a Java RS &lt;code&gt;Publisher&lt;/code&gt;, Muon can let you subscribe to that directly from a Nodejs service, or another language, event directly from a browser, including all the native back pressure signals, via the Muon.js browser implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, this is just one protocol that we can implement. There are others, and soon there will be many others, all cross platform and able to be formally verified.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;protocol-example-introspection&quot;&gt;Protocol Example: Introspection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This idea of defining messaging protocols as the basis of Muon had some interesting effects. Since we are specifying the interface as a rich, message protocol, including interaction and message content (both the structure/ schema and also semantically), we decided that we could have each Muon library implement an &lt;strong&gt;&lt;em&gt;Introspection&lt;/em&gt;&lt;/strong&gt; protocol. This is the ability to ask a running service what it can do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that we can use the Muon cli, for example, to do this :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code&gt;muon introspect remote-service&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It will then show what the service can do, across all of the implemented protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This fairly rich introspection information allows you, and running services, to understand the environment they are running in and begin to intelligently interact with it. It allows them to run &lt;strong&gt;autonomously&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also let us implement advanced tab completion on the CLI. So you can, for example, tab complete service names and streams provided by a service&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code&gt;&amp;gt; muon stream &amp;lt;TAB&amp;gt;
photon my-remote-service aether ather-password random-service

&amp;gt; muon stream my-remote-service &amp;lt;TAB&amp;gt;
/stream1 /stream2 /mystream&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same can be done for event source replay streams, RPC and is fairly easy to add for your own Protocols 9and will become even easier!)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-a-business-protocol-of-your-own&quot;&gt;Building a business protocol of your own&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both Introspection and Reactive Stream are both technically oriented messaging protocols. They are defined to support the technical capability that is needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of particular interest to many is the ability to design and build &lt;strong&gt;business oriented&lt;/strong&gt; protocols. Where messages that have semantics at the level of the business are being specified, and a distributed set of Muon agents can coordinate with each other in business terms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is currently possible with Muon, however there is more to do in this area. The problem we foresee is something we&amp;#8217;re calling the &quot;Matrix Effect&quot; (not that Matrix, Neo!). We are supporting many languages, and we want to support many protocols. Done naively, these will multiply together as you implement each protocol in each language and lead to fragmentation of the nascent Muon world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are avoiding this with two major initiatives. We are handling the language runtime problem by implementing Muon natively, in C++ and providing language bindings for the majority of langauges, alonside our Java and JavaScript implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The protocol question is something we have spent the last year researching, and we are well on the way to building a portable &lt;strong&gt;Protocol Language&lt;/strong&gt;. This will provide the ability to define Muon protocols, whether purely technical, or more likely, business oriented, in a declarative language that is converted into a Buchi Automaton managing the internal protocol finite state machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Together, these will mean that you can write a protocol once, test it once and then quickly interate and use it in the languages that you want to.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;technology&quot;&gt;Technology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Muon is a broad set of projects, but also fairly simple. There are a set of implementation of Muon available now, covering Java, Clojure and Nodejs. These are all roughly feature equivalent and compatible with each other. A C++ version is being developed, which will enable very broad language support via language bindings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alongside these, there are a set of prebuilt Muon microservices that implement commonly required features. The most advanced of these is Photon, an event store with event projection support that provides the backing for the Muon &lt;code&gt;event&lt;/code&gt; protocols.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see these as a platform of sorts, or as a set of tools you pull together to build your own services and use the ones we&amp;#8217;ve made.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a set of plugins that are being developed to extend the Muon libraries to support working with your existing technologies. These cover &lt;strong&gt;service discovery&lt;/strong&gt;, &lt;strong&gt;network transport&lt;/strong&gt; and &lt;strong&gt;protocols&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/muon-architecture.png&quot; alt=&quot;Muon Architecture&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Muon architecture, showing a Reactive Stream Client connecting to a remote Reactive Stream server&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;transports&quot;&gt;Transports&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Muon transport takes the core channel concept of Muon and puts it across a network. This can take many forms, depending on the use case and surrounding technology stack. So long as the transport can expose the ability to connect to another service and exchange messages with it bidirectionally, it fits the Muon model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best supported transport at the moment is AMQP, this is the one used in all the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are experimenting with supporting transports across Muon implementations by writing them in C++, wrapping them and importing into the various Muon libraries. This is being done on a Websocket based transport at &lt;a href=&quot;http://github.com/muoncore/transport-websocket&quot; class=&quot;bare&quot;&gt;http://github.com/muoncore/transport-websocket&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;discovery&quot;&gt;Discovery&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Service Discovery is a core need of Microservice systems. In Muon we have a discovery concept built in that enables you to find services, understand how to connect to them (ie, the &lt;em&gt;transport&lt;/em&gt; to use) along with some hints on the capabilities of the remote system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently available are &lt;strong&gt;AMQP&lt;/strong&gt; and &lt;strong&gt;Multicast&lt;/strong&gt;. Many others could be supported, covering services such as Consul and Etc, DNS or Netflix Eureka. Similarly to Transport, we are experimenting with a build once and integrate approach in concert with the native libMuon effort.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;protocols&quot;&gt;Protocols&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enabling users to define their own protocols and allow them to be used cross platform is one of the key aims of the Muon project. This is requiring fairly advanced work to design and developing the Protocol Language that supports verification, is reactive in nature and can run across the Muon implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This work is well underway, we have developed running protocols using it already and we hope to have something fully integrated into Muon to show within the next month or two that will enable you to define a messaging protocol in a simple, clean, declarative way that will support debugging, easy testing and enable a huge leap forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;coming-up-soon&quot;&gt;Coming up soon&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m going to be writing a series of developer diaries on the project, highlighting different areas and the progress that is being made. Subscribe to the RSS feed or follow me on Twitter for updates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Muon focuses hard on the nature of distributed communication, this leads to some interesting places, which I&amp;#8217;ll be writing about in their own right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;State management, CQRS, DDD and stream processing and how they interelate. This will introduce the Muon project event store, &lt;a href=&quot;http://muoncore.io/submodules/photon/docs/index.html&quot;&gt;Photon.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protocols, how to define them and the upcoming Protocol Language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating Transports and Discovery implementations for Muon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling failures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optimising messaging performance in various ways.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best place to get started is to visit the &lt;a href=&quot;http://muoncore.io/guide/getting-involved.html&quot;&gt;Getting Involved&lt;/a&gt; page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested in Muon and would like to help the project then it is open to being sponsored by friendly organisations supplying time. The more time the core contributors dedicate to the project the faster it will move. &lt;a href=&quot;/me.html&quot;&gt;Get in touch&lt;/a&gt; for more info on sponsoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope to see you there!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Tue, 21 Feb 2017 10:18:00 +0000</pubDate>
        <link>/blog/2017/02/21/muon-intro.html</link>
        <guid isPermaLink="true">/blog/2017/02/21/muon-intro.html</guid>
        
        <category>architecture</category>
        
        <category>muon</category>
        
        <category>microservices</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Shutting down Simplicity Itself</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Almost 5 years ago, Russ Miles and I embarked on a wild journey with a bright new company, Simplicity Itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We started it with the goal of applying &lt;strong&gt;Simplicity&lt;/strong&gt; in software development. This was Russ' inspiration from Rich Hickey,
creator of the Clojure language.  We had an idea, but no products, so we did what many do in that situation and
started to run a software consultancy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have done many things over the years, and the company has gone up and down as our interests moved around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those who&amp;#8217;ve never been in this situation, software consulting is both easy and hard.  It&amp;#8217;s easy, you need no
real investment to get going, just a confident sales pitch and the ability to pull off what you just sold. It&amp;#8217;s hard
in that cloning yourself is currently impossible, so how do you scale?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The past 5 years have been an incredible learning experience, but I have to accept that, like the allegory of the Curates Egg,
the parts that I love have inevitably been overwhelmed by the parts that I simply don&amp;#8217;t. An egg cannot be partially good, and
so it has come to the  point where I&amp;#8217;m calling time on the company, putting it to sleep and starting my next journey.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve already talked to our active client base about this, so I want this article to answer a few questions for
 clients who I&amp;#8217;ve not talked to for a while, people i know generally, fans, competitors, consultancy brethren etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-are-you-shutting-down&quot;&gt;Why are you shutting down?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Russ left SI in early 2016 to go to Atomist, a product startup.   I didn&amp;#8217;t know in advance, but it&amp;#8217;s a good move for him, as he&amp;#8217;d been having
a tough time maintaining the travel required in a consulting role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That left me as the sole active owner of SI.  There was much rebalancing required, and we had several long term contracts in place to fulfill.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I decided to take a year, run out the contracts and see what the world would give me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will remember 2016 as a bit of a blur. The SI team as was worked hard, but we didn&amp;#8217;t get much improved from where
 we started. Gaining clients as a pure architecture consultancy has always been hard, but as Microservices advanced in implementation, it
 became harder. Everything needed to be tied to implementing technologies, and we had found ourselves competitively boxed in, as the pure play
  tech consultancies won deals where we would have done previously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the issues I describe below came in to play, consultancy can be tough!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ordinarily, this would have been fine, but I found my interest in pure play consultancy decreasing
through the year. I got into software for the love of creating it, and it got to the point where I was presented a choice, either give up
 on development (even in free time!), or not do a good enough job in biz dev for a consultancy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To remake SI, we would have had to begin showing technical strength across the board. This was possible with the team we had, but would have
 meant publishing things that are essentially click bait, not research papers, deep thinking or articles moving the industry forward. Just another
 blog post on &quot;how to do X with Y&quot; (insert tech as appropriate).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I came to a moment of clarity late in 2016, I wanted the world to stop and get off. Running a software consultancy shop was no longer for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over winter we closed down, everyone has now left SI and we&amp;#8217;re officially closing shop today with a ritual burning of the business cards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s been a fun ride, but it&amp;#8217;s done now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-will-happen-to-the-london-microservices-user-group&quot;&gt;What will happen to the London Microservices User Group?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;I will continue to organise and run LMUG&lt;/strong&gt;. If anyone is interested in helping out, please get in touch, but I&amp;#8217;m going to
continue to be involved for the long term.  We (LMUG) just launched our new schedule for this year, if you have a talk, send it through!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;who-will-help-me-with-microservices-now&quot;&gt;Who will help me with Microservices now?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;I&amp;#8217;m now available as a freelancer&lt;/strong&gt;. So, &lt;a href=&quot;/hireme.html&quot;&gt;get in contact&lt;/a&gt; and I&amp;#8217;ll be happy to help you&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-are-you-going-to-do-next&quot;&gt;What are you going to do next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I love building software. I&amp;#8217;m going to do that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That will mean that I still teach, which I also love.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve been working on IoT hardware and software solutions for the past 6 months. Covering ultra low power wide area (10 mile) sensors
and back end systems (based on Muon and its event store, Photon). I&amp;#8217;ll be talking about this publicly now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My background before SI was as a freelancer, I&amp;#8217;ve been permanently employed for 18 months in my life and have no desire to
go back to that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, I&amp;#8217;m back to freelancing. I&amp;#8217;ll be investing my time heavily into Muon and building products with it with some interesting clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you need Microservices, Cloud, dev process or IoT help &lt;a href=&quot;/hireme.html&quot;&gt;give me a call&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;should-i-start-a-consultancy&quot;&gt;Should I start a consultancy?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the bit where I unveil some of the issues I&amp;#8217;ve seen with building a consultancy. I was warned before going in that
it would be hard, and to everyone that did so at the time, you were totally right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t regret much of what we did, but I would not do it again now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, what were the problems?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;people&quot;&gt;People&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consulting is a people business. You are selling people to other people. The only way to scale is to add more people,
which eventually becomes impossible to sustain.  If you go into consulting, know that &lt;strong&gt;you are not going to get rich&lt;/strong&gt; doing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can be comfortable, but accept that you are buying into a lifestyle, one with variety, choice, frustration, travel and
the constant need to be &quot;the smartest man in the room&quot;, or you are out of a job.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;headline-rates&quot;&gt;Headline rates&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since consulting is such a people intensive business, you have a very high cost base and you&amp;#8217;re looking for fairly low margins
as compared to a product business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an architectural consultancy as SI has mostly been, our engagements are more likely to been in the days to weeks range than
longer. There have been a couple of 9 month gigs, but they are the exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that a lot of time is spent chasing business, writing proposals, researching,&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;deal-lead-times&quot;&gt;Deal Lead Times&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a contractor, you will generally expect to spend a few weeks on the market, interview and start the following Monday.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a freelancer, you have a longer lead time on work, but normally measured in small weeks, allowing you to blend work
together, move thigs around and ensure you are kept well occupied when you want to be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a consultancy, suddenly the lead times jump to months. Constant back and forth justifying rates, estimates, multi page
 proposal documents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s soul destroying to have to spend so much time in pre sales, often delivering a significant portion of the value of an engagement
before it&amp;#8217;s even started. I never found peace with this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;free-consulting&quot;&gt;Free Consulting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those companies that recognise this, you&amp;#8217;re burning your suppliers, stop it. If you want proof that something works,
arrange a 2 week engagement and &lt;strong&gt;pay for that proof yourself&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Otherwise you are asking for free consultancy. When you are in the consulting business, you are trading in ideas and skills.
If you have to give these away for free simply to get your foot in the door, then run from that engagement, you&amp;#8217;ll never profit there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;constrained-by-the-company-mission&quot;&gt;Constrained by the Company Mission&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Something I didn&amp;#8217;t expect was how constraining creating a group/ company identity is. You create a company, run a marketing process and
come up with some sort of idea on what it should be perceived as. SI was perceived as an enterprise architecture consultancy specialising
in Microservices.  Which is correct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, and others in the company, this was not everything we wanted to do. We discussed AI, data tech, I loved electronics hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lots of areas, but how can you talk about these things without diluting the company marketing push?  It&amp;#8217;s hard to, especially when
you&amp;#8217;re running on fairly low marketing budgets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, I don&amp;#8217;t recommend that you try to start your own consultancy business, or if you do, keep it to just you and
bring in other freelancers as you need to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ll find it hard, you&amp;#8217;ll find you end up chasing things you may not love. You may even be pushed into giving up what you do love, in the service
of the greater good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, I&amp;#8217;m going to freelance my way for the next year or so, work on Muon, write my book and continue to learn new things.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 04 Feb 2017 12:18:00 +0000</pubDate>
        <link>/blog/2017/02/04/simplicity-itself-shutdown.html</link>
        <guid isPermaLink="true">/blog/2017/02/04/simplicity-itself-shutdown.html</guid>
        
        <category>business</category>
        
        <category>lmug</category>
        
        <category>microservices</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>A Microservices Developer API using .... Make</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article was originally posted at simplicityitself.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplicity Itself has now closed, and so I have moved my articles here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to read up on why it closed - See &lt;a href=&quot;/blog/2017/02/04/simplicity-itself-shutdown.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I now operate as a freelancer, specialising in Microservices, event systems, cloud foundry, IoT in many languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I run the &lt;a href=&quot;http://muoncore.io/&quot;&gt;Muon microservices platform project&lt;/a&gt; and the &lt;a href=&quot;http://meetup.com/London-Microservices-User-Group/&quot;&gt;London Microservices User Group&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m &lt;a href=&quot;/hireme.html&quot;&gt;available to hire&lt;/a&gt; for small and large projects&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gradle, NPM, Lein, Maven, Docker, Ansible, Kubernetes, Grunt &amp;#8230;&amp;#8203; The list goes on (and on, and on). Developer tooling, constantly re-invented for the modern age.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Microservices projects put &lt;strong&gt;particular pressures on development teams&lt;/strong&gt;, even without polyglot, you end up adding in a fair amount of automation
tooling (Docker anyone?) that is patchily integrated into the core developer tooling. Every time you add in docker support to gradle or grunt, the more locked you are to that language, making moving away that much harder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you do go polyglot (and I recommend that you do), then your problems are multiplied, as your &lt;strong&gt;common developer interface&lt;/strong&gt; is just gone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We recently reviewed the various tooling we were using on a Microservices project, and came up with a long, long list. All of which a developer needs to be able to develop effectively across the entire system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any new joiner would start to write a cheat sheet out. Just like the one in the wiki, of course. The one that no one maintains properly and is actually wrong is various subtle and totally misleading ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So when you come to a part of the project you&amp;#8217;ve not worked with on a while, you want to get that initial hook, the starting place to construct the 'Theory', the mental model of the system that you use to understand what you see in the repo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where do you start?  First you have to figure out what the entry point is, for tests, runtime. Is there one?  What&amp;#8217;s the build tool?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;What if there&amp;#8217;s more than one?&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sound familiar?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enter-make-the-once-and-future-dev-tool&quot;&gt;Enter Make, the Once and Future Dev Tool&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For all of our projects, we now use make as the top level developer tooling. Every project is driven from a Makefile.
Internally, this delegates to the tooling we know and love. So, for a java project, Gradle, for Clojure, Leiningen and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This allows us to encode the coarse things a developer needs to do in a file that is checked in with the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ever had to go digging into a CI server for how it actually does a release using Gradle?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our projects that&amp;#8217;s as simple as looking in the Makefile for what the &lt;code&gt;release&lt;/code&gt; target is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This helps from a vocabulary point of view, you decide your top level tasks, likely &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;clean&lt;/code&gt; and put those in every Makefile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking like so&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code&gt;build:
	./gradlew assemble

test: build
	./gradlew test

release:
	./gradlew publishSnapshot

clean:
	./gradlew clean
	rm -rf outputs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This same api could wrap node projects, docker-compose projects, some combination of the all of them, with the exact same developer api.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, any developer can go to any project, do quick verifications and use the other make targets to start understanding more of the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding a new language into the system becomes feasible again, CI can build it with no modifications, it just calls &lt;code&gt;make test&lt;/code&gt; in every instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see an example of this in [This Project](&lt;a href=&quot;https://github.com/muoncore/muon-intro-talk&quot; class=&quot;bare&quot;&gt;https://github.com/muoncore/muon-intro-talk&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, I&amp;#8217;m not proposing to replace your developer tooling. I&amp;#8217;m saying your toolbox is incomplete. You need to use Make around them all,
give them consistency and an ease of use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;it-tab-completes&quot;&gt;It Tab Completes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Did I mention make ships with bash tab autocomplete on most platforms. &lt;strong&gt;&lt;strong&gt;Can your dev tool do that?&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Thu, 03 Nov 2016 11:00:00 +0000</pubDate>
        <link>/blog/2016/11/03/make-developer-api.html</link>
        <guid isPermaLink="true">/blog/2016/11/03/make-developer-api.html</guid>
        
        <category>cloudnative</category>
        
        <category>continuousdelivery</category>
        
        <category>microservices</category>
        
        <category>make</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Microservices and Philosophy</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article was originally posted at simplicityitself.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplicity Itself has now closed, and so I have moved my articles here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to read up on why it closed - See &lt;a href=&quot;/blog/2017/02/04/simplicity-itself-shutdown.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I now operate as a freelancer, specialising in Microservices, event systems, cloud foundry, IoT in many languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I run the &lt;a href=&quot;http://muoncore.io/&quot;&gt;Muon microservices platform project&lt;/a&gt; and the &lt;a href=&quot;http://meetup.com/London-Microservices-User-Group/&quot;&gt;London Microservices User Group&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m &lt;a href=&quot;/hireme.html&quot;&gt;available to hire&lt;/a&gt; for small and large projects&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When talking to clients, both current and potential, at conferences, users groups and the like, the question arises often, &quot;what is a Microservice?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many respects, it&amp;#8217;s a question that defies a single answer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we&amp;#8217;re a consultancy specialising in Microservices, we did a review a while ago with our clients and partners (some of you may remember), asking
this very question!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The answers we got back were informative and ranged from the specific and technical, to the vague and emotional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some examples :-&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Small web services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bounded Contexts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Low LOC (yep!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small REST services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipes and filters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not SOA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fine grained SOA!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OO in the large&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functional in the large&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and many, many others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem we ended up with was that, when we layed them out to sort the common definition, we found that there wasn&amp;#8217;t one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As in, there wasn&amp;#8217;t a point of agreement. Instead we had broadly disjoint sets. This kind of accounts for the lack of a
clear definition!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Digging a little deeper, we found two things that did find general agreement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first, is &lt;strong&gt;isolation&lt;/strong&gt;. The property of pulling a system apart, generally using a network boundary, although not always (eg OSGI and NetKernel).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second point of agreement was a deep &lt;strong&gt;aspiration&lt;/strong&gt;. The quality that the world would be better, if we deploy microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, with my background as a hard technologist, this was fairly appalling. (although as a consultant, my proposal press fluttered!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-microservice-architecture&quot;&gt;The Microservice Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An interesting thing came up though, which was the terminology that people use when talking microservices. For much of the conversations, the phrase
used is actually &quot;a microservice architecture&quot;, rather than just &quot;microservices&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This intrigued me, as it leads directly to the question, if I can&amp;#8217;t define Microservices, can I define &lt;strong&gt;architecture&lt;/strong&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, to me, software architecture is something of a debased term, being stolen from construction. Is it the same as
 design?  Many would say, yes it is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;d take the opposite and say that, no, it can&amp;#8217;t be, and this is simply proven through cardinality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking over a system, you see myriad design decisions, each line has some aspect of design associated with it.
There appears to be an unlimited number of design decisions available to the software developer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Architecture?  There&amp;#8217;s recognisably fairly few software architectures. Certainly a number with a limit, maybe a few dozen that
are in active use. Consider things such as &lt;strong&gt;n-tier&lt;/strong&gt;, &lt;strong&gt;SEDA&lt;/strong&gt;, &lt;strong&gt;event based&lt;/strong&gt; etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, just with counting, they aren&amp;#8217;t the same thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I think of architecture, certain ideas and phrases go through my mind :-&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A set of constraints put on the system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A set of mental tools used to understand problems and create solutions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The route to the design, rather than the design itself&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A framework for arranging your skills, knowledge and aims within.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sound fair?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I know all these ideas from another field, well outside of software. &lt;strong&gt;Philosophy&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From this point of view, software architecture is a form of philosophy, and that leads us to an
interesting place as far as &lt;strong&gt;The Microservice Architecture&lt;/strong&gt; goes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can reframe this as the &lt;strong&gt;Microservices Philosophy&lt;/strong&gt; and have it mean fundamentally the same thing. This is something I&amp;#8217;m far more comfortable with,
 it&amp;#8217;s actually much more concrete!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve been understanding and grappling with philosophy for thousands of years, and we&amp;#8217;ve got a lot of wisdom to draw upon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-microservice-philosophy&quot;&gt;The Microservice Philosophy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From this point of view then, we can begin to frame Microservices very differently. Instead of reaching for a highly prescriptive
view on the particular methods, technologies or techniques, we can start to frame our microservices journey in more philosophical terms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is your end goal? What properties of the resulting system do you actually want to achieve?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This turns the discussion of 'what makes a microservices' from the prescriptive, to the descriptive. It allows us to evaluate
the resulting systems not in terms of how they were constructed, or what they used, but what they actually &lt;strong&gt;do&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For us, the essential properties of a successful Microservice system are all about responding positively to change pressure.
A system that not only accepts and adapts to change, but learns and improves itself in response to that change happening.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luckily, a term was invented for this property &lt;strong&gt;antifragile&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was coined by Nicolas Taleb, originally referring to economic and financial systems that benefit from stresses, rather than collapsing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From a pure tech point of view, this seems of limited use, is it really broadly applicable to have a system that responds to stresses?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you are considering Microservices as a purely technical endeavour, then frankly no, its not really a properyy we can easily generate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When looking at Microservices as a distributed system philosophy, and tech as a means to an end, then we have the opportunity to broaden our horizons
somewhat in pursuit of Antifragility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As soon as we bring people into the definition of 'the system', the development team in particular, then generating antifragile behaviour becomes easy and desirable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The famous &lt;strong&gt;Chaos Monkey&lt;/strong&gt; from Netflix is an excellent example of architecture given form. It isn&amp;#8217;t merely a failure testing tool, it&amp;#8217;s the architecture of the system
 enforced by a tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The antifragile feedback cycle in this case runs like this :-&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The dev team is made responsible for production outages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chaos Monkey generates production outages, on the weekend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The dev team comes in on Monday, and changes the system so that it can tolerate partial failure and still run.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The system then has been stressed, and then visibly improved itself in response to that stress. It can now tolerate failure in VM resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The system has become Antifragile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is done by creating the appropriate feedback loops, and then generating appropriate stress to push signals down those feedback loops.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;of-devops-and-continuous-delivery&quot;&gt;Of DevOps and Continuous Delivery&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is where Microservices overlaps heavily with the DevOps movement and Continuous Delivery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both place value on feedback cycles and improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DevOps comes from a cultural and operational viewpoint, Continuous Delivery approaches from the process space, Microservices from the runtime technical viewpoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All are speaking similar language, and I don&amp;#8217;t really care which you subscribe to in order to back up your philosophy of benefiting from change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-does-this-lead&quot;&gt;Where does this lead?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, this leads to building highly distributed systems. All the issues that are discussed, from log management,
platform comparison, containerisation, data handling and the like are all valid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your system will almost certain look like a set of processes coordinating over requests. What I&amp;#8217;d like you to take away is
that there is an objective measure you can use to evaluate your success, or otherwise, when deploying a Microservice system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That measure is how well your system expresses the essential properties defined by your architecture. These essential
 properties don&amp;#8217;t tend to change, so they can be used to measure against over the lifetime of a system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For us, the ability to change and benefit from that change is paramout. You may be looking more at team scaling, or simple runtime scaling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you aren&amp;#8217;t achieving these properties, and yet paying the Microservices tax (which can be &lt;strong&gt;expensive!&lt;/strong&gt;) then Microservices may well not be for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 20 Jul 2016 12:18:00 +0100</pubDate>
        <link>/microservices/2016/07/20/microservices-philosophy.html</link>
        <guid isPermaLink="true">/microservices/2016/07/20/microservices-philosophy.html</guid>
        
        <category>architecture</category>
        
        <category>continuousdelivery</category>
        
        <category>microservices</category>
        
        <category>devops</category>
        
        <category>antifragile</category>
        
        
        <category>Microservices</category>
        
      </item>
    
      <item>
        <title>The Minilith - Tightly Coupled Microservices</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article was originally posted at simplicityitself.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplicity Itself has now closed, and so I have moved my articles here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to read up on why it closed - See &lt;a href=&quot;/blog/2017/02/04/simplicity-itself-shutdown.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I now operate as a freelancer, specialising in Microservices, event systems, cloud foundry, IoT in many languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I run the &lt;a href=&quot;http://muoncore.io/&quot;&gt;Muon microservices platform project&lt;/a&gt; and the &lt;a href=&quot;http://meetup.com/London-Microservices-User-Group/&quot;&gt;London Microservices User Group&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m &lt;a href=&quot;/hireme.html&quot;&gt;available to hire&lt;/a&gt; for small and large projects&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without a doubt, Microservices as an architecture has grasped the imagination of modern development like no other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve found that, contrary to what many will tell you, it defies &lt;a href=&quot;http://www.simplicityitself.io/microservices%20and%20reactive/2015/06/16/defining-microservice-architecture.html&quot;&gt;tight definition&lt;/a&gt;. Specifying how microservices should interact with each other, how they should store and master data, and how they should be deployed is great for a conference talk, but the style has been adopted too broadly now to be prescriptively tied down by anyone. Opinions abound, and yet you will find &lt;strong&gt;no&lt;/strong&gt; consensus in what microservices actually are beyond the use of some form of effective isolation, usually network based.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This lack of definition is in many ways good. In fact what it allows is the creation of many definitions, all of them good for different purposes and different reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Agile wars seem to be coming to an end, I truly hope we won&amp;#8217;t now have the Microservices wars, another strain of dogma would frankly be upsetting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WIth that in mind, I sat down to read about and then watch a recent &lt;a href=&quot;http://www.infoq.com/news/2016/02/services-distributed-monolith&quot;&gt;talk by Ben Christensen&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I recommend you watch, it&amp;#8217;s an interesting take, and one worth analysing for yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve written on the perils of DRY &lt;a href=&quot;http://www.simplicityitself.io/our%20team/2015/01/01/development-by-slogan-dry-part1.html&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;http://www.simplicityitself.io/our%20team/2015/01/08/development-by-slogan-dry-part2.html&quot;&gt;fair&lt;/a&gt; &lt;a href=&quot;http://www.simplicityitself.io/our%20team/2015/01/09/development-by-slogan-dry-part3.html&quot;&gt;amount&lt;/a&gt;, and so to a large extent I totally agree. Where I diverge from much of the discussion is on the principle of autonomy and runtime coupling. Here, I am certainly a huge proponent of generating autonomy between services. The more a service can orient itself and figure out what to do, the better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This though, is an arbitrary statement, and digging deeper, is fairly biased towards a certain definition of 'a good microservice'.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This definition hinges purely on being able to change this service with scant regard for others in the system, the principle of &lt;strong&gt;autonomy&lt;/strong&gt;. When analysing the benefits of this though, you have to step back to the original business benefits that you are implementing. &lt;strong&gt;Autonomy&lt;/strong&gt; gives powerful benefits, but could it be overridden by other business needs in some circumstances?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simple answer is yes, sometimes full autonomy for an individual service isn&amp;#8217;t worth the investment to create. To create a fully autonomous service, you need to go through a set of steps, deliver a set of capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Briefly :-&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Handle versioning/ upgrade&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be able to run multiple versions of the service at once&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have a lot of tolerance in your data source schema (eg, a relational DB schema) for upgrade.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have effective Continuous Delivery process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disciplined and mature team.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you can do all these things well, you can generate fully autonous services. If you can&amp;#8217;t, what then?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;regulated-environments&quot;&gt;Regulated Environments&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We recently came across this on a client project. This project is undergoing a major decomposition effort, building of a new team and biggest impact of all, becoming adopted into a regulated environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All together, this leads to some interesting requirements and dare I say it, compromises.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One thing that has been picked up early is &lt;strong&gt;how do we deploy&lt;/strong&gt;. The continuous delivery question, how can we deliver features effectively, and as we need to. The issue here is one of dependencies between services, and how to handle them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We considered full vertical slicing of services a la Amazon to gain full autonomy, but that ran into the issue of our application of CQRS, we are splitting the read and write paths across different services during the decomposition. The original monolith is keeping the majority of the write paths for the initial phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We thought about a 'classic' microservices approach, individual service deploys, full autonomy. This fell foul of a few things. The team is new, and so doesn&amp;#8217;t have the cultural knowledge on how to handle versioning well built up yet for this application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More importantly, how to do CD in a regulated environment. The biggest impact is that tests on the deployment stored for approval tend to be systemic, rather than service based. Evidence needs to be stored for years. Lots of fun impacts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also had to plan to fail. When slicing services, it&amp;#8217;s certain that you will get the initial cut points wrong, even if only by a little. This means that feature development &lt;strong&gt;will&lt;/strong&gt; span services, the only question is how much?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given that, you have to be able to handle dependencies between services during deployment somehow to fully stand up a new feature. You&amp;#8217;ll need to upgrade databases in stages, update service APIs while serving traffic etc. Without a strong understanding upgrade and versioning, this is hard.  The regulatory impact leaves us required to have a deterministic runtime architecture, with evidence to show how it performs stored, version controlled and retrievable at will.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-minilith&quot;&gt;The Minilith&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The end result is that we compromise autonomy in favour of determinism. We compromise the ability to change arbitrarily inn favour of knowing what was
deployed at some point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We accept that deployment is broader than a single service, and that there are dependencies when deploying certain services, there is an order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The concept of closely related services is not new. We use the term &lt;strong&gt;&lt;strong&gt;minilith&lt;/strong&gt;&lt;/strong&gt;, invoking megalith, but smaller :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I pinched this term from &lt;a href=&quot;https://skillsmatter.com/legacy_profile/gawain-hammond&quot;&gt;Gawain Hammond&lt;/a&gt;, currently of the Sky Tech Futures team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A megalith is a collection of standing stones, most often interlocked in some way. Stone Henge is probably the most famous, and works for the analogy. The stones were all arranged in concentric circles, with top stones linking them all together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Minilith is similar, in that there are strong connections between services. Without the surrounding services these would simply fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The point is that some services naturally deploy as logical unit. They are separate at runtime, but they can&amp;#8217;t exist without each other, and are effectively version locked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see this in use in other areas. Take the Kubernetes &lt;strong&gt;Pod&lt;/strong&gt;, for example. Essentially the same idea, but most often described as bundling helper processes, databases, logging and the like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We propose that you consider taking this further. By extending the logical boundary you are wrapping around your service, you can gain many of the benefits of a multi process runtime (scaling, polyglot etc) without the full overhead of creating runtime autonomy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my next article, I&amp;#8217;ll take advantage of the minilith to enable continuous delivery in a regulated environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, we&amp;#8217;ll take a view through the data and deployment aspects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 11 Mar 2016 12:18:00 +0000</pubDate>
        <link>/blog/2016/03/11/the-minilith-tightly-coupled-microservices.html</link>
        <guid isPermaLink="true">/blog/2016/03/11/the-minilith-tightly-coupled-microservices.html</guid>
        
        <category>architecture</category>
        
        <category>microservices</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Defining The Microservice Architecture</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article was originally posted at simplicityitself.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplicity Itself has now closed, and so I have moved my articles here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to read up on why it closed - See &lt;a href=&quot;/blog/2017/02/04/simplicity-itself-shutdown.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I now operate as a freelancer, specialising in Microservices, event systems, cloud foundry, IoT in many languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I run the &lt;a href=&quot;http://muoncore.io/&quot;&gt;Muon microservices platform project&lt;/a&gt; and the &lt;a href=&quot;http://meetup.com/London-Microservices-User-Group/&quot;&gt;London Microservices User Group&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m &lt;a href=&quot;/hireme.html&quot;&gt;available to hire&lt;/a&gt; for small and large projects&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently (June 2015), I gave a &amp;lt;a title=&quot;Microservices Done RIght&quot; href=&quot;https://skillsmatter.com/skillscasts/6274-david-dawson&quot; target=&quot;_blank&quot;&amp;gt;talk&amp;lt;/a&amp;gt; at the DDD Exchange at Skills Matter in London.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was a little last minute! Our CTO, Russ Miles, was originally scheduled to deliver at the conference, but he had to be out of the country visiting one of our partners and so I was drafted in to deliver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a talk I&amp;#8217;ve wanted to give for a long time, so while it was a little rough around the edges, the message is something we&amp;#8217;ve been working with for a while.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It cuts to the heart of what we&amp;#8217;re doing, and why we&amp;#8217;re doing it.  It asks the question, &quot;What is Microservice Architecture?&quot;, leading to &quot;What is a Microservice?&quot;. Is this becoming debased, or can we pick out something useful?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the last few years, Simplicity Itself has been on something of a mission to change the way that we approach building software. We have positioned ourselves very much in the space of 'architecture'. By that I certainly do &lt;em&gt;*not*&lt;/em&gt; mean software design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The difference is obvious when you think about it, there are as many designs are there are designers, infinite in potential. Architectures however &amp;#8230;&amp;#8203; that simply &lt;em&gt;feels&lt;/em&gt; different, and putting your finger on the reason why is informative. We know that there are actually fairly few distinct architectures. Event architecture, 3 tier and so on. You can look at a piece of software and derive the architecture that it is implementing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This simple cardinality check means that design cannot be, and is not, the same as architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We approach architecture as the set of principles that guide you, the mental model that you apply, the process that you go through to analyse and engage with the world. It&amp;#8217;s not the solution, that is your design, it&amp;#8217;s what you use to guide you towards that solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everything I&amp;#8217;ve described there as architecture, I know well by another name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software Architecture is &lt;strong&gt;&lt;em&gt;philosophy&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This re-frames the entire debate around Microservices Architecture. Technology details slip away, specific techniques become implementation only. Instead we attempt to derive the guiding principles, the philosophy that is drawing the industry along with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, we can ask the question, what are the defining characteristics of a Microservices approach. This is a good question, one that we&amp;#8217;ve spent the past year researching with our clients, asking at the &amp;lt;a href=&quot;http://www.meetup.com/London-Microservices-User-Group/&quot; target=&quot;_blank&quot;&amp;gt;Microservices user group&amp;lt;/a&amp;gt; we run and analysing the systems we come in contact with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not HTTP, JSON does not feature. Docker is not the answer, and neither is devops.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only commonality is* &lt;em&gt;Isolation&lt;/em&gt;*&lt;em&gt;* between components*,&lt;/em&gt; enforced using a network boundary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing else is agreed upon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon this one element, all of the &lt;em&gt;*benefits*&lt;/em&gt; of a Microservices approach can be ultimately derived.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon this one element, all of the &lt;em&gt;*costs*&lt;/em&gt; of a Microservices approach can be ultimately derived too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apart from this though, something else showed up in our research. A deep seated &lt;em&gt;*aspirational*&lt;/em&gt; quality. The belief that a better way of software could be created, built upon this principle of isolation. This aspiration was most commonly expressed as '&lt;em&gt;*keeping up with change*&lt;/em&gt;' or some derivative thereof.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Those two items, &lt;em&gt;isolation _and _aspiration&lt;/em&gt;. Those are the defining qualities of Microservices today.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For us, this is hugely useful, as it very directly converts into a philosophical approach to building software, it forms the guiding principles that lead you towards many (although not all) of the techniques, technologies and processes that are currently being deployed in Microservices projects across the globe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This does though leave Microservices as an architecture, not a method of adequate design. This is where we see projects going very wrong and not gaining the benefits that they expected to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have seen this often enough that we&amp;#8217;ve come to term this the '&amp;lt;a href=&quot;/premium/Microservices-Adoption-Hump&quot; target=&quot;&lt;em&gt;blank&quot;&amp;gt;*_Microservices Adoption Hump&lt;/em&gt;*&amp;lt;/a&amp;gt;' (article by Russ Miles), getting all the pain of Microservices, without gaining the benefits.
## Enter &lt;em&gt;Design&lt;/em&gt;
Fundamentally, Microservices is not a design, it cannot be, since it&amp;#8217;s an architecture. This has led to many teams applying their existing design skills to the new architecture and deployment style and wondering why things get hard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we see many HTTP/ JSON based systems. Numerous attempts at large scale REST based systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is because the team will have built HTTP based systems before, they are well understood, HTTP is widely implemented, and it seems the way to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The issue though is that HTTP/ JSON/ REST is &lt;strong&gt;&lt;em&gt;not a design methodology&lt;/em&gt;&lt;/strong&gt; either_. _It is an integration style. In the same category as messaging or RPC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You still need to understand how to model a system, how to pull it apart into decently understood components, map out your flows of data, tie them back to business needs. The whole thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, what we see now are debates occurring in the Microservices space on what integration style is best. This is misguided, it&amp;#8217;s the wrong way round. You choose your integration style as an implementation, not as a guiding principle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Discussion on how to effectively how to model an application when it is split out as Microservices are only just beginning to become public, and many of the arguments we see both publicly and privately are mimicking the object design wars of 10 years ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This makes me sad, as it&amp;#8217;s a blinkered, wasteful thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Domain Driven Design&lt;/em&gt;&lt;/strong&gt; is, as the name implies, a design discipline. Proponents and researchers in the subject have spent the last 10+ years understanding how to model problems and build solutions using well known, well understood techniques.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is as good a place as any, and better than most, in order to learn how to effectively model an application, whether you take advantage of the deep isolation that a Microservices architecture avails you of or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Watch the talk above for some specific examples of how this plays out. Buy Eric&amp;#8217;s book for some more information (read the second half first is my advice), find your local meetup and other web resources and connect into learning how to &lt;em&gt;design&lt;/em&gt; software. We run a 3 day course on &amp;lt;a title=&quot;Antifragile Software: Building Adaptable Software with Microservices&quot; href=&quot;/learning/building-microservices-course/&quot; target=&quot;&lt;em&gt;blank&quot;&amp;gt;Building Microservices&amp;lt;/a&amp;gt;. This is effectively a course on how to design software using events that cross network boundaries all the time, which describes a microservices system handily.
## The Microservices Community
Dan North tells a good story around the concepts of a &lt;strong&gt;_bounded&lt;/em&gt;&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;centred&lt;/em&gt;&lt;/strong&gt; community. A bounded community enforces membership via a set of constraints, rules of membership. Scrum is a good example of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whatever the original intentions of the founders of scrum, what we see now is many forms of scrum, with a distinct feeling of &lt;em&gt;other&lt;/em&gt; when you stray outside the prescribed practices. These act as a constraint on what is accepted as Scrum, and what it not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;em&gt;centred community&lt;/em&gt;, on the other hand, has no real constraints on behaviour, no real prescriptions on what it means to be part of it. Instead, there are some &lt;em&gt;*guiding principles*&lt;/em&gt; that form the centre of the community ethos. Members will self identify to a large extent, and be accepted for the reason that they share the core principles. Behaviour Driven Design is held up as a good example of this style, as it has no real definition of itself, yet it certainly exists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, based on our definition of the Microservices Architecture as fundamentally aspirational and the community that has formed around it, &lt;strong&gt;Microservices is a &amp;lt;i&amp;gt;centred&amp;lt;/i&amp;gt; community&lt;/strong&gt;. There is no strong definition of what it is, and yet it evidently exists and is having a tremendous impact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has many advantages! The technology stacks we can investigate are rich and varied. The processes are open to question and change. The integrations, models and designs are able to be researched and improved as needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My fear is that, due to the desire of many to try to pin down exactly what a &lt;em&gt;Microservice Design&lt;/em&gt; is, they will, without understanding what they are doing, &lt;em&gt;turn it into a bounded community&lt;/em&gt;, fixated on rules and stiffled with specifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ultimately, this is what I see happened with SOA, WS-* was added in ever greater detail, and is a large reason why standards based SOA failed to gain wider adoption than it ultimately did.
## Welcome to the new world, looks like the old world&amp;#8230;&amp;#8203;
Microservices is undergoing a hype cycle, this is certainly true, yet that does not mean that it describes something that has no value. When coupled with the tremendous innovation happening in the infrastructure space, we are entering a special time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The key is to realise that we need to take what we have already learned, the battle tested software design wisdom from the past decades and apply it once again in the context of a new philosophy based on ever stronger isolation mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only then will we be able to reap the benefits and live up to the aspirations we are harbouring that site at the core of the Microservices architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;lt;hr /&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplicity Itself are researching better ways of building Microservices. By applying DDD, Event Sourcing and other techniques, we are building platforms that are naturally multi cloud and infrastructure agnostic and give a great User eXperience for Microservices, whether you are a developer, manager or operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will be releasing this technology platform as open source within the next few months. If you would like more information or to be part of the beta programme &amp;lt;a href=&quot;/contact&quot; target=&quot;_blank&quot;&amp;gt;contact us&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 17 Jun 2015 00:55:00 +0100</pubDate>
        <link>/microservices%20and%20reactive/2015/06/17/defining-microservice-architecture.html</link>
        <guid isPermaLink="true">/microservices%20and%20reactive/2015/06/17/defining-microservice-architecture.html</guid>
        
        
        <category>Microservices and Reactive</category>
        
      </item>
    
      <item>
        <title>Service Discovery Overview</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article was originally posted at simplicityitself.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplicity Itself has now closed, and so I have moved my articles here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to read up on why it closed - See &lt;a href=&quot;/blog/2017/02/04/simplicity-itself-shutdown.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I now operate as a freelancer, specialising in Microservices, event systems, cloud foundry, IoT in many languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I run the &lt;a href=&quot;http://muoncore.io/&quot;&gt;Muon microservices platform project&lt;/a&gt; and the &lt;a href=&quot;http://meetup.com/London-Microservices-User-Group/&quot;&gt;London Microservices User Group&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m &lt;a href=&quot;/hireme.html&quot;&gt;available to hire&lt;/a&gt; for small and large projects&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When building microservices, you have to naturally distribute your application around a network. It is almost always the case that you are building in a cloud environment, and often using &lt;em&gt;immutable infrastructure&lt;/em&gt;. Ironically, this means that your virtual machines or containers are created and destroyed much more often than normal, as this immutable nature means that you don&amp;#8217;t maintain them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These properties together mean that your services need to be reconfigured with the location of the other services they need to connect to. This reconfiguration needs to be able to happen on the fly, so that when a new service instance is created, the rest of the network can automatically find it and start to communication with it.  This process is called &lt;em&gt;Service Discovery&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This concept is one of the key underpinnings of a Microservice architecture. Attempting to create Microservices without a service discovery system will lead to pain and misery as you will, in effect, be working as a manual replacement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As well as the standalone solutions presented here, most platforms, whether full PaaS or the more minimal container managers, have some form of Service Discovery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which system to choose?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are currently several key contenders to choose from, ZooKeeper, Consul, Etcd, Eureka and RollYourOwn&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;zookeeper&quot;&gt;ZooKeeper&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://zookeeper.apache.org/&quot; class=&quot;bare&quot;&gt;http://zookeeper.apache.org/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ZooKeeper is an Apache project providing a distributed, eventually consistent hierarchical configuration store.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ZooKeeper originated out of the world of Hadoop, where it was built to help in the maintenance of the various components in a hadoop cluster. It is not a service discovery system per se, but is instead a distributed configuration store that provides notifications to registered clients.  With this, it is possible to build a service discovery infrastructure, however every service must explicitly register with ZooKeeper, and the clients must then check in the configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Netflix have invested a lot of time and resources into ZooKeeper, and so a significant amount of Netflix OSS projects have some ZooKeeper integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;I Recommend&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ZooKeeper is a well understood clustered system. It is a consistent configuration store, and so being well designed and built, a network partition will cause the smaller side of the partition to shut down. For that reason, you must choose whether consistency or availability is more important to you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you do choose a consistent system for service discovery, such as Zookeeper, then you need to understand the implications on your services. You have tied them to the lifecycle of the discovery system, and also exposed them to any failure conditions it may have. You should not assume that 'consistent' means free from failure. Zookeeper is among the older cluster managers, and consensus (pun intended) is that it&amp;#8217;s implementation of master selection is robust and well behaved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you do choose to use ZooKeeper, investigate the Netflix OSS projects, staring with &amp;lt;a title=&quot;Curator&quot; href=&quot;https://github.com/Netflix/curator&quot; target=&quot;_blank&quot;&amp;gt;Curator&amp;lt;/a&amp;gt; as a first point of call, and only use bare ZooKeeper if they don&amp;#8217;t fit your needs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since Zookeeper is mature and established, there is a large ecosystem of good quality (mostly!) clients and libraries to enrich your projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;consul&quot;&gt;Consul&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.consul.io&quot; class=&quot;bare&quot;&gt;http://www.consul.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consul is a peer to peer, strongly consistent data store that uses a gossip protocol to communicate and form dynamic clusters. It is based on the Serf library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It provides a hierarchical key/value store that you can place data in and register watches against to be notified when something changes within a particular key space. In this, it is similar to ZooKeeper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As opposed to ZooKeeper and Etcd, however, Consul implements a full service discovery system in the library, and so you don&amp;#8217;t need to implement your own use use a third party library. This includes health checks on both nodes and services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It implements a DNS server interface, allowing you to perform service lookups using the DNS protocol. It also allows 'clients' to run as independent processes and register/ monitor services on their behalf. This removes the need to add explicit Consul support into your applications.  This is similar in concept to the Netflix OSS &lt;em&gt;Sidecar&lt;/em&gt; concept that allows services with no ZooKeeper support to be registered and be discoverable in ZooKeeper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deployment wise, Consul agents are deployed onto the systems that services are running on, and not in a centralised fashion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;I Recommend&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a newer product, and one that we like a lot. Generally recommended if you are able to adopt it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with the other strongly consistent systems in the list, care must be taken that you understand the implications of adopting it, including understanding it&amp;#8217;s potential failure modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like something similar that chooses availability rather than consistency, investigate the related Serf project. The Serf library serves as the basis of Consul, but has chosen different data guarantees guarantees. It is nowhere near as full featured, but can handily survive a split brain scenario and reform afterwards without any ill effects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;etcd&quot;&gt;Etcd&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://www.etcd.io&quot; class=&quot;bare&quot;&gt;http://www.etcd.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Etcd is an HTTP accessible key/ value store. In that, it is similar in concept to ZooKeeper and the K/V portion of Consul.  It functions as a distributed, hierarchical configuration system, and can be used to build a Service Discovery system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It originally grew out of the CoreOS project, is maintained by them and recently achieved a stable major release&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Simplicity Itself Recommends:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are primarily using HTTP as your communication mechanism, then Etcd can&amp;#8217;t be easily beaten. It provides a well distributed, fast HTTP based system, and has query and push notifications on change, via long polling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;eureka&quot;&gt;Eureka&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Netflix/eureka&quot; class=&quot;bare&quot;&gt;https://github.com/Netflix/eureka&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eureka is a 'mid tier load balancer' built by Netflix and released as open source. It is designed to allow services to be able to register with a Eureka server and then locate each other via that server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eureka has several capabilities beyond other solutions presented here. It contains a built in load balancer which, although fairly simple, certainly does it&amp;#8217;s job.  Netflix state that they have a secondary load balancer implementation internally that uses Eureka as a data source and is much more full featured. This hasn&amp;#8217;t been released.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use Spring for your projects, then &amp;lt;a href=&quot;http://projects.spring.io/spring-cloud/&quot;&amp;gt;Spring Cloud&amp;lt;/a&amp;gt; is an interesting project to look into, in order to be able to automatically register and resolve services in Eureka.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;I Recommend&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like all Netflix OSS projects, it was written to run on the AWS infrastructure first and foremost. While other Netflix OSS projects have been extended to run in other environments, Eureka does not appear to be moving in that direction.
We very much like the relation between client and server in the Eureka design, as it leaves the clients with the ability to continue working if the service discovery infrastructure fails.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Server wise, Eureka has also chosen availability rather than consistency. You must also be aware of the implications of this choice as it directly affects your application. Primarily, this manifests as a potentially stale or partial view of the full data set. This is discussed in the Eureka documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Spring projects, Eureka is now the quickest to get started with due to the investment the Spring team has made in adopting the Netflix OSS components via the Spring Cloud sub-projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;rollyourown&quot;&gt;RollYourOwn&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you can&amp;#8217;t adapt to that, then you will have to create your own discovery solution within your existing infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basis of this will be :-&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Services must be able to notify each other of their availability and supply connection information&amp;lt;/li&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Periodic updates to the records to strip out stale information&amp;lt;/li&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy integration into your application infrastructure, often using a standard protocol such as HTTP or DNS&amp;lt;/li&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notifications on services starting and stopping.&amp;lt;/li&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;I Recommend&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building your own discovery service should not be taken lightly. If you do need to then we recommend building a system that values availability rather the consistency. These are significantly easier to build, and more likely that you will build something that is functional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The approach we would recommend would be to use some existing message infrastructure and broadcast notifications on service status. Each service caches the latest information from the broadcasts and uses that as a local set of service discovery data. This has the potential for being stale, but we&amp;#8217;ve found this approach to scale reasonably well and is easy to implement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you do require consistency, then using some consistent data store could serve as the basis for a distributed configuration system that can be used to build service discovery. You will also want to emit notifications on status changes. You should realise, though, that building a consistent, distributed system is exceptionally hard to get right, and very easy to get subtly wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, really not recommended, but certainly possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 10 Jun 2015 00:00:00 +0100</pubDate>
        <link>/getting/started/with/microservices/2015/06/10/service-discovery-overview.html</link>
        <guid isPermaLink="true">/getting/started/with/microservices/2015/06/10/service-discovery-overview.html</guid>
        
        
        <category>Getting</category>
        
        <category>Started</category>
        
        <category>With</category>
        
        <category>Microservices</category>
        
      </item>
    
  </channel>
</rss>
